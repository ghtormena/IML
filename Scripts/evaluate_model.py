from ultralytics import YOLO
import torch

# --- 1. CONFIGURA√á√ïES ---

# Caminho para os pesos do seu melhor modelo
MODEL_PATH = '/home/nexus/Documents/IML/Scripts/runs/classify/train4/weights/best.pt' # IMPORTANTE: Verifique se este caminho est√° correto!

# Caminho para o diret√≥rio principal do seu dataset
DATASET_PATH = 'dataset_yolo'

# --- 2. CARREGAR O MODELO ---

# Carrega o modelo treinado a partir do arquivo .pt

model = YOLO(MODEL_PATH)

# --- 3. EXECUTAR A AVALIA√á√ÉO NO CONJUNTO DE TESTE ---

print("\nüß™ Iniciando a avalia√ß√£o no conjunto de teste...")

# A fun√ß√£o .val() executa a avalia√ß√£o.
# Usamos o argumento split='test' para dizer ao YOLO para usar a pasta 'test'.
metrics = model.val(
    data=DATASET_PATH,
    split='test',
    project='runs/evaluation', # Salva os resultados em uma nova pasta
    name='test_results_med'      # Nome do subdiret√≥rio para esta avalia√ß√£o
)

print("\n‚úÖ Avalia√ß√£o conclu√≠da!")

# --- 4. ANALISAR OS RESULTADOS ---

print("\nüìä M√©tricas de Desempenho no Conjunto de Teste:")

# A 'metrics' √© um objeto que cont√©m todos os resultados.
# Para classifica√ß√£o, as principais m√©tricas s√£o top1 e top5 accuracy.
print(f"  - Acur√°cia Top-1 (precis√£o da melhor previs√£o): {metrics.top1:.4f}")
print(f"  - Acur√°cia Top-5 (precis√£o das 5 melhores previs√µes): {metrics.top5:.4f}")

# O YOLO tamb√©m salva uma matriz de confus√£o, que √© excelente para an√°lise de erros.
print(f"\nüìà A Matriz de Confus√£o foi salva em: {metrics.save_dir}/confusion_matrix.png")
print(f"   Use a matriz para ver quais classes o modelo est√° confundindo.")